<!--
  Right now, the android app is hard coded to look for /cmd_vel as the input
  topic.
 -->
<launch>
  <arg name="3d_sensor"  				  default="$(env ROCH_3D_SENSOR)"/>  <!-- kinect, asus_xtion_pro, r200 -->
  <arg name="2d_laser"   				  default="$(env ROCH_LASER)"/>  <!-- ls01c, rplidar -->
  <arg name="2d_laser_enabled"		      default="$(env ROCH_LASER_ENABLE)"/> <!-- if add 2d laser or not -->
  <arg name="3d_sensor_enabled"		      default="$(env ROCH_3D_SENSOR_ENABLE)"/> <!-- if add 3d sensor or not  -->
  <arg name="3d_sensor_nav_enabled"		  default="$(env ROCH_3D_SENSOR_NAV_ENABLE)"/> <!-- if add 3d sensor for navigation -->
  <arg name="simulation"                  default="$(env ROCH_SIMULATION)"/> <!-- necessary param -->
  <arg name="emulation"                   default="false"/> <!-- Enable/Disenable for simulation -->
  <arg name="scan_topic"            	  default="/make_a_map/scan"/>
  <arg name="cmd_vel_topic"          	  default="/teleop/cmd_vel"/>
  <arg name="compressed_image_topic"  	  default="/teleop/compressed_image"/>
  <arg name="debug" 					  default="false"/>
  <arg name="application_namespace"		  default=""/>
  <group unless="$(arg emulation)">
    <include file="$(find roch_bringup)/launch/sensor.launch">
      <arg name="rgb_processing" value="true" />
      <arg name="depth_registration" value="false" />
      <arg name="depth_processing" value="false" />
    </include>

    <!-- Make a slower camera feed available. -->
    <!-- *********************** Teleoperation ********************** -->
    <param name="camera/rgb/image_rect_color/compressed/jpeg_quality" value="22"/>
    <node pkg="topic_tools" type="throttle" name="camera_throttle" args="messages camera/rgb/image_rect_color/compressed 5"/>

    <node pkg="nodelet" type="nodelet" name="teleop_velocity_smoother"
          args="load yocs_velocity_smoother/VelocitySmootherNodelet /mobile_base_nodelet_manager">
      <rosparam file="$(find roch_bringup)/param/smoother.yaml" command="load"/>
      <remap from="teleop_velocity_smoother/raw_cmd_vel" to="$(arg cmd_vel_topic)"/>
      <remap from="teleop_velocity_smoother/smooth_cmd_vel" to="twist_mux/keyboard_teleop/cmd_vel"/>

      <!-- Robot velocity feedbacks; use the one configured as base default -->
      <remap from="teleop_velocity_smoother/odometry" to="/odom"/>
      <remap from="teleop_velocity_smoother/robot_cmd_vel" to="/roch_velocity_controller/cmd_vel"/>
    </node>

    <!-- *************************** Navi *************************** -->
    <!--- Run move_base -->
    <include file="$(find roch_navigation)/launch/move_base.launch">
      <arg name="odom_topic" value="/odom" />
    </include>
    <!--- Run gmapping -->
    <group if="$(arg 3d_sensor_enabled)">
      <group if="$(arg 3d_sensor_nav_enabled)">
        <include file="$(find roch_navigation)/launch/includes/$(arg 3d_sensor)_gmapping.launch" />
	  </group>
    </group>
    <group if="$(arg 2d_laser_enabled)">
      <group unless="$(arg 3d_sensor_nav_enabled)">
        <include file="$(find roch_navigation)/launch/includes/$(arg 2d_laser)_gmapping.launch" />
  	  </group>
    </group>
    <!--- Run robot_pose_publisher -->
    <node pkg="robot_pose_publisher" name="robot_pose_publisher" type="robot_pose_publisher">
      <param name="is_stamped" value="true"/>
      <param name="base_frame" value="base_footprint"/>
    </node>
    <!--- Run throttle -->
    <node pkg="topic_tools" type="throttle" name="relay_compressed_throttle_image" args="messages camera/rgb/image_rect_color/compressed_throttle 5 $(arg compressed_image_topic)" required="true">
      <param name="lazy" value="false"/>
    </node>
    <node pkg="topic_tools" type="throttle" name="relay_scan" args="messages scan 5 $(arg scan_topic)" required="true">
      <param name="lazy" value="false"/>
    </node>
    
    <node pkg="world_canvas_server" type="world_canvas_server" name="world_canvas_server" args="$(arg debug)" output="screen">
      <param name="start_map_manager" value="true"/>
      <param name="auto_save_map" value="false"/>
    </node> 
  </group>
  <group if="$(arg emulation)">
    <!-- *********************** Teleoperation ********************** -->
    <!-- Make a slower camera feed available. -->
    <param name="camera/rgb/image_raw/compressed/jpeg_quality" value="22"/>
    <node pkg="topic_tools" type="throttle" name="camera_throttle" args="messages camera/rgb/image_raw/compressed 5"/>

    <!-- *************************** Navi *************************** -->
    <!--- Run gmapping -->
    <group if="$(arg 3d_sensor_enabled)">
      <group if="$(arg 3d_sensor_nav_enabled)">
        <include file="$(find roch_navigation)/launch/includes/$(arg 3d_sensor)_gmapping.launch" >
          <arg name="base_frame" value="$(arg application_namespace)/base_footprint"/>
          <arg name="odom_frame" value="$(arg application_namespace)/odom"/>
		</include>
	  </group>
    </group>
    <group if="$(arg 2d_laser_enabled)">
      <group unless="$(arg 3d_sensor_nav_enabled)">
        <include file="$(find roch_navigation)/launch/includes/$(arg 2d_laser)_gmapping.launch" >
          <arg name="base_frame" value="$(arg application_namespace)/base_footprint"/>
          <arg name="odom_frame" value="$(arg application_namespace)/odom"/>
		</include>
  	  </group>
    </group>

    <node pkg="robot_pose_publisher" name="robot_pose_publisher" type="robot_pose_publisher">
      <param name="is_stamped" value="true"/>
      <param name="base_frame" value="$(arg application_namespace)/base_footprint"/>
    </node>

    <!-- relay in topic_tools package does not work with multimaster.. -->
    <node pkg="rocon_python_utils" name="cmd_vel_relay" type="topic_relay" args="/teleop/cmd_vel cmd_vel_mux/input/teleop geometry_msgs/Twist"/>  
    <node pkg="rocon_python_utils" name="image_relay" type="topic_relay" args="camera/rgb/image_raw/compressed /teleop/compressed_image sensor_msgs/CompressedImage"/>  
    <node pkg="rocon_python_utils" name="scan_relay" type="topic_relay" args="scan /make_a_map/scan sensor_msgs/LaserScan"/>
    
    <node pkg="world_canvas_server" type="world_canvas_server" name="world_canvas_server" args="$(arg debug)" output="screen">
      <param name="start_map_manager" value="true"/>
      <param name="auto_save_map" value="false"/>
    </node>
  </group>
</launch>
